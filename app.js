//..................initialize required modules
var express = require('express'); 
var methodOverride = require('method-override');
var bodyParser = require('body-parser');
var serveStatic = require('serve-static');
var finalhandler = require('finalhandler');
var errorhandler = require('errorhandler');
var mongoose = require('mongoose');
var im = require('imagemagick');


var app=express();
var http=require('http');


//configure express as a typical web server // UPDATED FOR CONNECT
//redirect to html
app.get("/", function(req, res) { //get method is specific to express, not connect
  res.redirect("/sandbox.html");
});

//use middleware for http server framework
//add detail
app.use(methodOverride());

app.use(bodyParser.urlencoded({extended:false}));

app.use(bodyParser.json());

app.use(serveStatic(process.cwd()+'/scripts'));
var serve = serveStatic('public', {'sandbox':['sandbox.html']});

app.use(errorhandler({
	dumpExceptions: true,
	showStack: true
}));


//make a little server that serves contents of 'public'
var server = http.createServer(function(req,res){
	var done = finalhandler(req, res);
	serve(req, res, done);
});

//listen for visitors
server.listen(process.env.PORT || 6789);


//................................Socket.io
//initialize socket.io to listen to the same server as express
var io = require('socket.io').listen(server);
io.set('log level', 1);    //reduce the amount of debugging output written to the console



//list of online users
var users={};

//current color
var color="#000000";       
//a dummy counter used in order to generate incremental unique user ids
var count=1;  


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//MONGO DB
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//.....................................................MongoDB
//.................open a connection to the mongodb server

var server = process.env.MONGOLAB_URI || 'mongodb://localhost/my_database';
var port = process.env.PORT || 27017;
mongoose.connect(server, function (err, res) {
  if (err) { 
    console.log ('ERROR connecting to: ' + server + '. ' + err);
  } else {
    console.log ('Succeeded connected to: ' + server);
  }
});


var Art = mongoose.model('Art', {
	created: Date, 
	objectid: String
});




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SOCKET IO
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


io.on('connection', function (socket) {
	console.log("connected!");

	//this event is automatically fired when a user disconnects
	socket.on('disconnect', function () {
		//socket.emit('Bye', {"bye":"bye"});
		//SaveEdit("UserLeft", {"id":socket.user.id, "ci":socket.user.ci, "s_id":socket.id});	//notify all other users that this socket's user left
		console.log("disconnected!");
	});
	



	socket.on('add-item', function(data) {
		console.dir("!!!!!");
		socket.emit('updated-db', data);
		var art = new Art({
			objectid: data.objectid, 
			created: new Date()
		});
		art.save();
		io.emit('updated-db', data);

	});
	
	socket.on('get-items', function(data) {

		console.log("GET ITEMS");
		Art.find().sort('-created').limit(20).exec(function(err, results) {
			if(err) return res.send(err);
			console.log(results);
			io.emit('send-items', results);
		});
		
	});

	//UPDATE GRAPH, SEND ARRAY FROM OBJECT MAP TO GRAPH
	socket.on('update-graph', function(data) {
		console.dir("UPDATE GRAPH");
		io.emit('updated-graph', data);
	});

	//HIGHLIGHT SELECTED OBJECT IN THE GRAPH
	socket.on('selectobj-graph', function(data) {
		console.dir("UPDATE GRAPH _ highlight selected object");
		io.emit('updated-graphobj', data);
	});	


});




